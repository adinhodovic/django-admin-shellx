[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "django-admin-shellx"
version = "0.3.0"
description = "A Django Admin Shell"
authors = ["Adin Hodovic <hodovicadin@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/adinhodovic/django-admin-shellx"
repository = "https://github.com/adinhodovic/django-admin-shellx"
documentation = "https://github.com/adinhodovic/django-admin-shellx"
keywords = ["django", "admin", "terminal", "shell", "xterm.js"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Framework :: Django",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
exclude = [
  "django_admin_shellx/static/django_admin_shellx/css/terminal.css",
  "django_admin_shellx/static/django_admin_shellx/js/terminal.js",
]
include = [
  "django_admin_shellx/static/django_admin_shellx/output/terminal.js",
  "django_admin_shellx/static/django_admin_shellx/output/terminal.css",
]
packages = [
  { include = "django_admin_shellx" },
  { include = "django_admin_shellx_custom_admin" },
]


# Remember to run `poetry update` instead of `poetry install` on the first go!
[tool.poetry.dependencies]
python = "^3.9 || ^3.10 || ^3.11"
Django = ">=4.* || >=5.*"
channels = { extras = ["daphne"], version = "^4.0.0" }
django-model-utils = "^4.4.0"

[tool.poetry.group.dev.dependencies]
django-extensions = "^3.2.3"
pytest = "^8.0.0"
pytest-django = "^4.8.0"
black = "^24.2.0"
mypy = "^1.8.0"
mypy-extensions = "^1.0.0"
coverage = "^7.4.1"
pytest-cov = "^4.1.0"
django-coverage-plugin = "^3.1.0"
pylint = "^3.0.3"
ptpython = "^3.0.26"
pylint-django = "^2.5.5"
djlint = "^1.34.1"
pudb = "^2024.1"
werkzeug = "^3.0.1"
pytest-asyncio = "^0.23.5"
factory-boy = "^3.3.0"
tox = "^4.13.0"
pytest-clarity = "^1.0.1"

[tool.pytest.ini_options]
addopts = "--ds=tests.settings --reuse-db --pdbcls=pudb.debugger:Debugger"
python_files = "tests.py test_*.py"
norecursedirs = ".git */migrations/* */static/* venv .venv .poetry .virtualenv node_modules"

[tool.black]
exclude = ".*(venv|virtualenv|.poetry|migrations|node_modules|.tox)"

[tool.isort]
skip_glob = "**/migrations/*.py,**/fixtures/*.py,infra/**/*.py"
# https://github.com/psf/black/issues/251#issuecomment-535187912
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main"]
exclude = [".venv", "migrations.*"]

[tool.django-stubs]
django_settings_module = "tests.settings"

[tool.pylint.'MASTER']
load-plugins = "pylint_django"
ignore = "manage.py"

[tool.pylint.'FORMAT']
max-line-length = 150

[tool.pylint.'MESSAGES CONTROL']
disable = "missing-docstring,invalid-name,logging-fstring-interpolation,fixme,duplicate-code"

[tool.pylint.'DESIGN']
max-parents = 13

[tool.pylint.'SIMILARITIES']
# Minimum lines number of a similarity.
min-similarity-lines = 4
# Ignore comments when computing similarities.
ignore-comments = "yes"
# Ignore docstrings when computing similarities.
ignore-docstrings = "yes"
# Ignore imports when computing similarities.
ignore-imports = "yes"

[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
preserve_blank_line = true
# TODO: remove T002 when fixed https://github.com/Riverside-Healthcare/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"
